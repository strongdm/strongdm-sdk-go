// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file was generated by protogen. DO NOT EDIT.

package sdm

import (
	"time"
)

type Tags map[string]string

func (t Tags) clone() Tags {
	res := Tags{}
	for k, v := range t {
		res[k] = v
	}
	return res
}

type AKS struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`

	ClientCertificate string `json:"clientCertificate"`

	ClientKey string `json:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type AKSBasicAuth struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type AKSServiceAccount struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Token string `json:"token"`
}

type AKSServiceAccountUserImpersonation struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Token string `json:"token"`
}

type AKSUserImpersonation struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`

	ClientCertificate string `json:"clientCertificate"`

	ClientKey string `json:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type AWS struct {
	AccessKey string `json:"accessKey"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	HealthcheckRegion string `json:"healthcheckRegion"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`

	SecretAccessKey string `json:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// AWSConsole is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type AWSConsole struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	EnableEnvVariables bool `json:"enableEnvVariables"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	PortOverride int32 `json:"portOverride"`

	Region string `json:"region"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	SessionExpiry int32 `json:"sessionExpiry"`

	Subdomain string `json:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// AWSConsoleStaticKeyPair is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type AWSConsoleStaticKeyPair struct {
	AccessKey string `json:"accessKey"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	PortOverride int32 `json:"portOverride"`

	Region string `json:"region"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`

	SecretAccessKey string `json:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	SessionExpiry int32 `json:"sessionExpiry"`

	Subdomain string `json:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type AWSStore struct {
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`

	Region string `json:"region"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// Accounts are users that have access to strongDM. There are two types of accounts:
// 1. **Users:** humans who are authenticated through username and password or SSO.
// 2. **Service Accounts:** machines that are authenticated using a service token.
type Account interface {
	// GetID returns the unique identifier of the Account.
	GetID() string
	// IsSuspended returns whether the Account is suspended.
	IsSuspended() bool
	// SetSuspended sets the suspended of the Account.
	SetSuspended(bool)
	// GetTags returns the tags of the Account.
	GetTags() Tags
	// SetTags sets the tags of the Account.
	SetTags(Tags)
	isOneOf_Account()
}

func (*Service) isOneOf_Account() {}

// GetID returns the unique identifier of the Service.
func (m *Service) GetID() string { return m.ID }

// IsSuspended returns whether the Service is suspended.
func (m *Service) IsSuspended() bool {
	return m.Suspended
}

// SetSuspended sets the suspended of the Service.
func (m *Service) SetSuspended(v bool) {
	m.Suspended = v
}

// GetTags returns the tags of the Service.
func (m *Service) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Service.
func (m *Service) SetTags(v Tags) {
	m.Tags = v.clone()
}
func (*User) isOneOf_Account() {}

// GetID returns the unique identifier of the User.
func (m *User) GetID() string { return m.ID }

// IsSuspended returns whether the User is suspended.
func (m *User) IsSuspended() bool {
	return m.Suspended
}

// SetSuspended sets the suspended of the User.
func (m *User) SetSuspended(v bool) {
	m.Suspended = v
}

// GetTags returns the tags of the User.
func (m *User) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the User.
func (m *User) SetTags(v Tags) {
	m.Tags = v.clone()
}

// AccountAttachments assign an account to a role.
type AccountAttachment struct {
	// The id of the account of this AccountAttachment.
	AccountID string `json:"accountId"`
	// Unique identifier of the AccountAttachment.
	ID string `json:"id"`
	// The id of the attached role of this AccountAttachment.
	RoleID string `json:"roleId"`
}

// AccountAttachmentCreateResponse reports how the AccountAttachments were created in the system.
type AccountAttachmentCreateResponse struct {
	// The created AccountAttachment.
	AccountAttachment *AccountAttachment `json:"accountAttachment"`
	// Reserved for future use.
	Meta *CreateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// AccountAttachmentDeleteResponse returns information about a AccountAttachment that was deleted.
type AccountAttachmentDeleteResponse struct {
	// Reserved for future use.
	Meta *DeleteResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// AccountAttachmentGetResponse returns a requested AccountAttachment.
type AccountAttachmentGetResponse struct {
	// The requested AccountAttachment.
	AccountAttachment *AccountAttachment `json:"accountAttachment"`
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// AccountCreateResponse reports how the Accounts were created in the system.
type AccountCreateResponse struct {
	// The created Account.
	Account Account `json:"account"`
	// Reserved for future use.
	Meta *CreateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The auth token generated for the Account. The Account will use this token to
	// authenticate with the strongDM API.
	Token string `json:"token"`
}

// AccountDeleteResponse returns information about a Account that was deleted.
type AccountDeleteResponse struct {
	// Reserved for future use.
	Meta *DeleteResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// AccountGetResponse returns a requested Account.
type AccountGetResponse struct {
	// The requested Account.
	Account Account `json:"account"`
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// AccountGrants connect a resource directly to an account, giving the account the permission to connect to that resource.
type AccountGrant struct {
	// The account ID of this AccountGrant.
	AccountID string `json:"accountId"`
	// Unique identifier of the AccountGrant.
	ID string `json:"id"`
	// The resource ID of this AccountGrant.
	ResourceID string `json:"resourceId"`
	// The timestamp when the resource will be granted. When creating an AccountGrant, if this field is not specified, it will default to the current time.
	StartFrom time.Time `json:"startFrom"`
	// The timestamp when the resource grant will expire.
	ValidUntil time.Time `json:"validUntil"`
}

// AccountGrantCreateResponse reports how the AccountGrants were created in the system.
type AccountGrantCreateResponse struct {
	// The created AccountGrant.
	AccountGrant *AccountGrant `json:"accountGrant"`
	// Reserved for future use.
	Meta *CreateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// AccountGrantDeleteResponse returns information about a AccountGrant that was deleted.
type AccountGrantDeleteResponse struct {
	// Reserved for future use.
	Meta *DeleteResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// AccountGrantGetResponse returns a requested AccountGrant.
type AccountGrantGetResponse struct {
	// The requested AccountGrant.
	AccountGrant *AccountGrant `json:"accountGrant"`
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// AccountUpdateResponse returns the fields of a Account after it has been updated by
// a AccountUpdateRequest.
type AccountUpdateResponse struct {
	// The updated Account.
	Account Account `json:"account"`
	// Reserved for future use.
	Meta *UpdateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

type AmazonEKS struct {
	AccessKey string `json:"accessKey"`
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`

	ClusterName string `json:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Region string `json:"region"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`

	SecretAccessKey string `json:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type AmazonEKSUserImpersonation struct {
	AccessKey string `json:"accessKey"`
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`

	ClusterName string `json:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Region string `json:"region"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`

	SecretAccessKey string `json:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type AmazonES struct {
	AccessKey string `json:"accessKey"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	PortOverride int32 `json:"portOverride"`

	Region string `json:"region"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`

	SecretAccessKey string `json:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type AmazonMQAMQP091 struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type Athena struct {
	AccessKey string `json:"accessKey"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Output string `json:"output"`

	PortOverride int32 `json:"portOverride"`

	Region string `json:"region"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`

	SecretAccessKey string `json:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type AuroraMysql struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type AuroraPostgres struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Azure struct {
	AppID string `json:"appId"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TenantID string `json:"tenantId"`
}

type AzureCertificate struct {
	AppID string `json:"appId"`
	// Bind interface
	BindInterface string `json:"bindInterface"`

	ClientCertificate string `json:"clientCertificate"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TenantID string `json:"tenantId"`
}

// AzureMysql is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type AzureMysql struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type AzurePostgres struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type AzureStore struct {
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	VaultUri string `json:"vaultUri"`
}

type BigQuery struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	PortOverride int32 `json:"portOverride"`

	PrivateKey string `json:"privateKey"`

	Project string `json:"project"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Cassandra struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type Citus struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Clustrix struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Cockroach struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

// ControlPanelGetSSHCAPublicKeyResponse represents a request for an
// organization's SSH Certificate Authority public key.
type ControlPanelGetSSHCAPublicKeyResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// The public key of the SSH Certificate Authority, in OpenSSH RSA public
	// key format.
	PublicKey string `json:"publicKey"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// ControlPanelVerifyJWTResponse reports whether x-sdm-token is valid.
type ControlPanelVerifyJWTResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// Reports if the given token is valid.
	ValID bool `json:"valid"`
}

// CreateResponseMetadata is reserved for future use.
type CreateResponseMetadata struct {
}

type CyberarkConjurStore struct {
	AppURL string `json:"appUrl"`
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type CyberarkPAMExperimentalStore struct {
	AppURL string `json:"appUrl"`
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type CyberarkPAMStore struct {
	AppURL string `json:"appUrl"`
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type DB2I struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type DB2LUW struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

// DeleteResponseMetadata is reserved for future use.
type DeleteResponseMetadata struct {
}

// DelineaStore is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type DelineaStore struct {
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`

	ServerUrl string `json:"serverUrl"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TenantName string `json:"tenantName"`
}

type DocumentDBHost struct {
	AuthDatabase string `json:"authDatabase"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type DocumentDBReplicaSet struct {
	AuthDatabase string `json:"authDatabase"`
	// Bind interface
	BindInterface string `json:"bindInterface"`

	ConnectToReplica bool `json:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Hostname must contain the hostname/port pairs of all instances in the replica set separated by commas.
	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	PortOverride int32 `json:"portOverride"`

	ReplicaSet string `json:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Druid struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type DynamoDB struct {
	AccessKey string `json:"accessKey"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	PortOverride int32 `json:"portOverride"`

	Region string `json:"region"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`

	SecretAccessKey string `json:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type Elastic struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type ElasticacheRedis struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type GCP struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`

	Keyfile string `json:"keyfile"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Scopes string `json:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type GCPStore struct {
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`

	ProjectID string `json:"projectId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// Gateway represents a StrongDM CLI installation running in gateway mode.
type Gateway struct {
	// The hostname/port tuple which the gateway daemon will bind to.
	// If not provided on create, set to "0.0.0.0:listen_address_port".
	BindAddress string `json:"bindAddress"`
	// Device is a read only device name uploaded by the gateway process when
	// it comes online.
	Device string `json:"device"`
	// GatewayFilter can be used to restrict the peering between relays and
	// gateways.
	GatewayFilter string `json:"gatewayFilter"`
	// Unique identifier of the Gateway.
	ID string `json:"id"`
	// The public hostname/port tuple at which the gateway will be accessible to clients.
	ListenAddress string `json:"listenAddress"`
	// Location is a read only network location uploaded by the gateway process
	// when it comes online.
	Location string `json:"location"`
	// Unique human-readable name of the Gateway. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name string `json:"name"`
	// The current state of the gateway. One of: "new", "verifying_restart",
	// "restarting", "started", "stopped", "dead", "unknown"
	State string `json:"state"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
	// Version is a read only sdm binary version uploaded by the gateway process
	// when it comes online.
	Version string `json:"version"`
}

// GetResponseMetadata is reserved for future use.
type GetResponseMetadata struct {
}

type GoogleGKE struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	ServiceAccountKey string `json:"serviceAccountKey"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type GoogleGKEUserImpersonation struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	ServiceAccountKey string `json:"serviceAccountKey"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type Greenplum struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type HTTPAuth struct {
	AuthHeader string `json:"authHeader"`
	// Bind interface
	BindInterface string `json:"bindInterface"`

	DefaultPath string `json:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	HeadersBlacklist string `json:"headersBlacklist"`

	HealthcheckPath string `json:"healthcheckPath"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	HostOverride string `json:"hostOverride"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	Subdomain string `json:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Url string `json:"url"`
}

type HTTPBasicAuth struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	DefaultPath string `json:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	HeadersBlacklist string `json:"headersBlacklist"`

	HealthcheckPath string `json:"healthcheckPath"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	HostOverride string `json:"hostOverride"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	Subdomain string `json:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Url string `json:"url"`

	Username string `json:"username"`
}

type HTTPNoAuth struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	DefaultPath string `json:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	HeadersBlacklist string `json:"headersBlacklist"`

	HealthcheckPath string `json:"healthcheckPath"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	HostOverride string `json:"hostOverride"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	Subdomain string `json:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Url string `json:"url"`
}

type Kubernetes struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`

	ClientCertificate string `json:"clientCertificate"`

	ClientKey string `json:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type KubernetesBasicAuth struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type KubernetesServiceAccount struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Token string `json:"token"`
}

type KubernetesServiceAccountUserImpersonation struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Token string `json:"token"`
}

type KubernetesUserImpersonation struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`

	ClientCertificate string `json:"clientCertificate"`

	ClientKey string `json:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.
	HealthcheckNamespace string `json:"healthcheckNamespace"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// MTLSMysql is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type MTLSMysql struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`

	ClientCertificate string `json:"clientCertificate"`

	ClientKey string `json:"clientKey"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	ServerName string `json:"serverName"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type MTLSPostgres struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	CertificateAuthority string `json:"certificateAuthority"`

	ClientCertificate string `json:"clientCertificate"`

	ClientKey string `json:"clientKey"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	ServerName string `json:"serverName"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Maria struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Memcached struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type Memsql struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

// MongoHost is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type MongoHost struct {
	AuthDatabase string `json:"authDatabase"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type MongoLegacyHost struct {
	AuthDatabase string `json:"authDatabase"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	ReplicaSet string `json:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type MongoLegacyReplicaset struct {
	AuthDatabase string `json:"authDatabase"`
	// Bind interface
	BindInterface string `json:"bindInterface"`

	ConnectToReplica bool `json:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	ReplicaSet string `json:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

// MongoReplicaSet is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type MongoReplicaSet struct {
	AuthDatabase string `json:"authDatabase"`
	// Bind interface
	BindInterface string `json:"bindInterface"`

	ConnectToReplica bool `json:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	ReplicaSet string `json:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

// MongoShardedCluster is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type MongoShardedCluster struct {
	AuthDatabase string `json:"authDatabase"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type Mysql struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Neptune struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type NeptuneIAM struct {
	AccessKey string `json:"accessKey"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	Endpoint string `json:"endpoint"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	Region string `json:"region"`

	RoleArn string `json:"roleArn"`

	RoleExternalID string `json:"roleExternalId"`

	SecretAccessKey string `json:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// Nodes make up the strongDM network, and allow your users to connect securely to your resources.
// There are two types of nodes:
// 1. **Relay:** creates connectivity to your datasources, while maintaining the egress-only nature of your firewall
// 1. **Gateways:** a relay that also listens for connections from strongDM clients
type Node interface {
	// GetID returns the unique identifier of the Node.
	GetID() string
	// GetTags returns the tags of the Node.
	GetTags() Tags
	// SetTags sets the tags of the Node.
	SetTags(Tags)
	// GetName returns the name of the Node.
	GetName() string
	// SetName sets the name of the Node.
	SetName(string)
	isOneOf_Node()
}

func (*Gateway) isOneOf_Node() {}

// GetID returns the unique identifier of the Gateway.
func (m *Gateway) GetID() string { return m.ID }

// GetTags returns the tags of the Gateway.
func (m *Gateway) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Gateway.
func (m *Gateway) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the Gateway.
func (m *Gateway) GetName() string {
	return m.Name
}

// SetName sets the name of the Gateway.
func (m *Gateway) SetName(v string) {
	m.Name = v
}
func (*Relay) isOneOf_Node() {}

// GetID returns the unique identifier of the Relay.
func (m *Relay) GetID() string { return m.ID }

// GetTags returns the tags of the Relay.
func (m *Relay) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Relay.
func (m *Relay) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the Relay.
func (m *Relay) GetName() string {
	return m.Name
}

// SetName sets the name of the Relay.
func (m *Relay) SetName(v string) {
	m.Name = v
}

// NodeCreateResponse reports how the Nodes were created in the system.
type NodeCreateResponse struct {
	// Reserved for future use.
	Meta *CreateResponseMetadata `json:"meta"`
	// The created Node.
	Node Node `json:"node"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The auth token generated for the Node. The Node will use this token to
	// authenticate with the strongDM API.
	Token string `json:"token"`
}

// NodeDeleteResponse returns information about a Node that was deleted.
type NodeDeleteResponse struct {
	// Reserved for future use.
	Meta *DeleteResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// NodeGetResponse returns a requested Node.
type NodeGetResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// The requested Node.
	Node Node `json:"node"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// NodeUpdateResponse returns the fields of a Node after it has been updated by
// a NodeUpdateRequest.
type NodeUpdateResponse struct {
	// Reserved for future use.
	Meta *UpdateResponseMetadata `json:"meta"`
	// The updated Node.
	Node Node `json:"node"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

type Oracle struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type Postgres struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Presto struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type RDP struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	DowngradeNlaConnections bool `json:"downgradeNlaConnections"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type RabbitMQAMQP091 struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

// RateLimitMetadata contains information about remaining requests avaialable
// to the user over some timeframe.
type RateLimitMetadata struct {
	// The bucket this user/token is associated with, which may be shared between
	// multiple users/tokens.
	Bucket string `json:"bucket"`
	// How many total requests the user/token is authorized to make before being
	// rate limited.
	Limit int64 `json:"limit"`
	// How many remaining requests out of the limit are still avaialable.
	Remaining int64 `json:"remaining"`
	// The time when remaining will be reset to limit.
	ResetAt time.Time `json:"resetAt"`
}

type RawTCP struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type Redis struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	TlsRequired bool `json:"tlsRequired"`

	Username string `json:"username"`
}

type Redshift struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

// Relay represents a StrongDM CLI installation running in relay mode.
type Relay struct {
	// Device is a read only device name uploaded by the gateway process when
	// it comes online.
	Device string `json:"device"`
	// GatewayFilter can be used to restrict the peering between relays and
	// gateways.
	GatewayFilter string `json:"gatewayFilter"`
	// Unique identifier of the Relay.
	ID string `json:"id"`
	// Location is a read only network location uploaded by the gateway process
	// when it comes online.
	Location string `json:"location"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name string `json:"name"`
	// The current state of the relay. One of: "new", "verifying_restart",
	// "awaiting_restart", "restarting", "started", "stopped", "dead",
	// "unknown".
	State string `json:"state"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
	// Version is a read only sdm binary version uploaded by the gateway process
	// when it comes online.
	Version string `json:"version"`
}

// RemoteIdentities define the username to be used for a specific account
// when connecting to a remote resource using that group.
type RemoteIdentity struct {
	// The account for this remote identity.
	AccountID string `json:"accountId"`
	// Unique identifier of the RemoteIdentity.
	ID string `json:"id"`
	// The remote identity group.
	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`
	// The username to be used as the remote identity for this account.
	Username string `json:"username"`
}

// RemoteIdentityCreateResponse reports how the RemoteIdentities were created in the system.
type RemoteIdentityCreateResponse struct {
	// Reserved for future use.
	Meta *CreateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The created RemoteIdentity.
	RemoteIdentity *RemoteIdentity `json:"remoteIdentity"`
}

// RemoteIdentityDeleteResponse returns information about a RemoteIdentity that was deleted.
type RemoteIdentityDeleteResponse struct {
	// Reserved for future use.
	Meta *DeleteResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// RemoteIdentityGetResponse returns a requested RemoteIdentity.
type RemoteIdentityGetResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The requested RemoteIdentity.
	RemoteIdentity *RemoteIdentity `json:"remoteIdentity"`
}

// A RemoteIdentityGroup defines a group of remote identities.
type RemoteIdentityGroup struct {
	// Unique identifier of the RemoteIdentityGroup.
	ID string `json:"id"`
	// Unique human-readable name of the RemoteIdentityGroup.
	Name string `json:"name"`
}

// RemoteIdentityGroupGetResponse returns a requested RemoteIdentityGroup.
type RemoteIdentityGroupGetResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The requested RemoteIdentityGroup.
	RemoteIdentityGroup *RemoteIdentityGroup `json:"remoteIdentityGroup"`
}

// RemoteIdentityUpdateResponse returns the fields of a RemoteIdentity after it has been updated by
// a RemoteIdentityUpdateRequest.
type RemoteIdentityUpdateResponse struct {
	// Reserved for future use.
	Meta *UpdateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The updated RemoteIdentity.
	RemoteIdentity *RemoteIdentity `json:"remoteIdentity"`
}

// A Resource is a database, server, cluster, website, or cloud that strongDM
// delegates access to.
type Resource interface {
	// GetID returns the unique identifier of the Resource.
	GetID() string
	// GetName returns the name of the Resource.
	GetName() string
	// SetName sets the name of the Resource.
	SetName(string)
	// GetTags returns the tags of the Resource.
	GetTags() Tags
	// SetTags sets the tags of the Resource.
	SetTags(Tags)
	// GetSecretStoreID returns the secret store id of the Resource.
	GetSecretStoreID() string
	// SetSecretStoreID sets the secret store id of the Resource.
	SetSecretStoreID(string)
	// GetEgressFilter returns the egress filter of the Resource.
	GetEgressFilter() string
	// SetEgressFilter sets the egress filter of the Resource.
	SetEgressFilter(string)
	// GetBindInterface returns the bind interface of the Resource.
	GetBindInterface() string
	// SetBindInterface sets the bind interface of the Resource.
	SetBindInterface(string)
	// GetHealth returns the health status of the Resource.
	GetHealth() string
	isOneOf_Resource()
}

func (*AKS) isOneOf_Resource() {}

// GetID returns the unique identifier of the AKS.
func (m *AKS) GetID() string { return m.ID }

// GetName returns the name of the AKS.
func (m *AKS) GetName() string {
	return m.Name
}

// SetName sets the name of the AKS.
func (m *AKS) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AKS.
func (m *AKS) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AKS.
func (m *AKS) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AKS.
func (m *AKS) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AKS.
func (m *AKS) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AKS.
func (m *AKS) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AKS.
func (m *AKS) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AKS.
func (m *AKS) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AKS.
func (m *AKS) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AKS.
func (m *AKS) GetHealth() bool {
	return m.Healthy
}
func (*AKSBasicAuth) isOneOf_Resource() {}

// GetID returns the unique identifier of the AKSBasicAuth.
func (m *AKSBasicAuth) GetID() string { return m.ID }

// GetName returns the name of the AKSBasicAuth.
func (m *AKSBasicAuth) GetName() string {
	return m.Name
}

// SetName sets the name of the AKSBasicAuth.
func (m *AKSBasicAuth) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AKSBasicAuth.
func (m *AKSBasicAuth) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AKSBasicAuth.
func (m *AKSBasicAuth) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AKSBasicAuth.
func (m *AKSBasicAuth) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AKSBasicAuth.
func (m *AKSBasicAuth) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AKSBasicAuth.
func (m *AKSBasicAuth) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AKSBasicAuth.
func (m *AKSBasicAuth) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AKSBasicAuth.
func (m *AKSBasicAuth) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AKSBasicAuth.
func (m *AKSBasicAuth) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AKSBasicAuth.
func (m *AKSBasicAuth) GetHealth() bool {
	return m.Healthy
}
func (*AKSServiceAccount) isOneOf_Resource() {}

// GetID returns the unique identifier of the AKSServiceAccount.
func (m *AKSServiceAccount) GetID() string { return m.ID }

// GetName returns the name of the AKSServiceAccount.
func (m *AKSServiceAccount) GetName() string {
	return m.Name
}

// SetName sets the name of the AKSServiceAccount.
func (m *AKSServiceAccount) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AKSServiceAccount.
func (m *AKSServiceAccount) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AKSServiceAccount.
func (m *AKSServiceAccount) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AKSServiceAccount.
func (m *AKSServiceAccount) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AKSServiceAccount.
func (m *AKSServiceAccount) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AKSServiceAccount.
func (m *AKSServiceAccount) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AKSServiceAccount.
func (m *AKSServiceAccount) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AKSServiceAccount.
func (m *AKSServiceAccount) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AKSServiceAccount.
func (m *AKSServiceAccount) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AKSServiceAccount.
func (m *AKSServiceAccount) GetHealth() bool {
	return m.Healthy
}
func (*AKSServiceAccountUserImpersonation) isOneOf_Resource() {}

// GetID returns the unique identifier of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) GetID() string { return m.ID }

// GetName returns the name of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) GetName() string {
	return m.Name
}

// SetName sets the name of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AKSServiceAccountUserImpersonation.
func (m *AKSServiceAccountUserImpersonation) GetHealth() bool {
	return m.Healthy
}
func (*AKSUserImpersonation) isOneOf_Resource() {}

// GetID returns the unique identifier of the AKSUserImpersonation.
func (m *AKSUserImpersonation) GetID() string { return m.ID }

// GetName returns the name of the AKSUserImpersonation.
func (m *AKSUserImpersonation) GetName() string {
	return m.Name
}

// SetName sets the name of the AKSUserImpersonation.
func (m *AKSUserImpersonation) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AKSUserImpersonation.
func (m *AKSUserImpersonation) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AKSUserImpersonation.
func (m *AKSUserImpersonation) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AKSUserImpersonation.
func (m *AKSUserImpersonation) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AKSUserImpersonation.
func (m *AKSUserImpersonation) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AKSUserImpersonation.
func (m *AKSUserImpersonation) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AKSUserImpersonation.
func (m *AKSUserImpersonation) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AKSUserImpersonation.
func (m *AKSUserImpersonation) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AKSUserImpersonation.
func (m *AKSUserImpersonation) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AKSUserImpersonation.
func (m *AKSUserImpersonation) GetHealth() bool {
	return m.Healthy
}
func (*AmazonEKS) isOneOf_Resource() {}

// GetID returns the unique identifier of the AmazonEKS.
func (m *AmazonEKS) GetID() string { return m.ID }

// GetName returns the name of the AmazonEKS.
func (m *AmazonEKS) GetName() string {
	return m.Name
}

// SetName sets the name of the AmazonEKS.
func (m *AmazonEKS) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AmazonEKS.
func (m *AmazonEKS) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AmazonEKS.
func (m *AmazonEKS) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AmazonEKS.
func (m *AmazonEKS) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AmazonEKS.
func (m *AmazonEKS) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AmazonEKS.
func (m *AmazonEKS) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AmazonEKS.
func (m *AmazonEKS) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AmazonEKS.
func (m *AmazonEKS) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AmazonEKS.
func (m *AmazonEKS) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AmazonEKS.
func (m *AmazonEKS) GetHealth() bool {
	return m.Healthy
}
func (*AmazonEKSUserImpersonation) isOneOf_Resource() {}

// GetID returns the unique identifier of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) GetID() string { return m.ID }

// GetName returns the name of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) GetName() string {
	return m.Name
}

// SetName sets the name of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AmazonEKSUserImpersonation.
func (m *AmazonEKSUserImpersonation) GetHealth() bool {
	return m.Healthy
}
func (*AmazonES) isOneOf_Resource() {}

// GetID returns the unique identifier of the AmazonES.
func (m *AmazonES) GetID() string { return m.ID }

// GetName returns the name of the AmazonES.
func (m *AmazonES) GetName() string {
	return m.Name
}

// SetName sets the name of the AmazonES.
func (m *AmazonES) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AmazonES.
func (m *AmazonES) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AmazonES.
func (m *AmazonES) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AmazonES.
func (m *AmazonES) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AmazonES.
func (m *AmazonES) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AmazonES.
func (m *AmazonES) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AmazonES.
func (m *AmazonES) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AmazonES.
func (m *AmazonES) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AmazonES.
func (m *AmazonES) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AmazonES.
func (m *AmazonES) GetHealth() bool {
	return m.Healthy
}
func (*AmazonMQAMQP091) isOneOf_Resource() {}

// GetID returns the unique identifier of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) GetID() string { return m.ID }

// GetName returns the name of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) GetName() string {
	return m.Name
}

// SetName sets the name of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AmazonMQAMQP091.
func (m *AmazonMQAMQP091) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AmazonMQAMQP091.
func (m *AmazonMQAMQP091) GetHealth() bool {
	return m.Healthy
}
func (*Athena) isOneOf_Resource() {}

// GetID returns the unique identifier of the Athena.
func (m *Athena) GetID() string { return m.ID }

// GetName returns the name of the Athena.
func (m *Athena) GetName() string {
	return m.Name
}

// SetName sets the name of the Athena.
func (m *Athena) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Athena.
func (m *Athena) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Athena.
func (m *Athena) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Athena.
func (m *Athena) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Athena.
func (m *Athena) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Athena.
func (m *Athena) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Athena.
func (m *Athena) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Athena.
func (m *Athena) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Athena.
func (m *Athena) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Athena.
func (m *Athena) GetHealth() bool {
	return m.Healthy
}
func (*AuroraMysql) isOneOf_Resource() {}

// GetID returns the unique identifier of the AuroraMysql.
func (m *AuroraMysql) GetID() string { return m.ID }

// GetName returns the name of the AuroraMysql.
func (m *AuroraMysql) GetName() string {
	return m.Name
}

// SetName sets the name of the AuroraMysql.
func (m *AuroraMysql) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AuroraMysql.
func (m *AuroraMysql) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AuroraMysql.
func (m *AuroraMysql) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AuroraMysql.
func (m *AuroraMysql) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AuroraMysql.
func (m *AuroraMysql) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AuroraMysql.
func (m *AuroraMysql) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AuroraMysql.
func (m *AuroraMysql) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AuroraMysql.
func (m *AuroraMysql) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AuroraMysql.
func (m *AuroraMysql) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AuroraMysql.
func (m *AuroraMysql) GetHealth() bool {
	return m.Healthy
}
func (*AuroraPostgres) isOneOf_Resource() {}

// GetID returns the unique identifier of the AuroraPostgres.
func (m *AuroraPostgres) GetID() string { return m.ID }

// GetName returns the name of the AuroraPostgres.
func (m *AuroraPostgres) GetName() string {
	return m.Name
}

// SetName sets the name of the AuroraPostgres.
func (m *AuroraPostgres) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AuroraPostgres.
func (m *AuroraPostgres) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AuroraPostgres.
func (m *AuroraPostgres) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AuroraPostgres.
func (m *AuroraPostgres) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AuroraPostgres.
func (m *AuroraPostgres) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AuroraPostgres.
func (m *AuroraPostgres) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AuroraPostgres.
func (m *AuroraPostgres) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AuroraPostgres.
func (m *AuroraPostgres) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AuroraPostgres.
func (m *AuroraPostgres) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AuroraPostgres.
func (m *AuroraPostgres) GetHealth() bool {
	return m.Healthy
}
func (*AWS) isOneOf_Resource() {}

// GetID returns the unique identifier of the AWS.
func (m *AWS) GetID() string { return m.ID }

// GetName returns the name of the AWS.
func (m *AWS) GetName() string {
	return m.Name
}

// SetName sets the name of the AWS.
func (m *AWS) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AWS.
func (m *AWS) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AWS.
func (m *AWS) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AWS.
func (m *AWS) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AWS.
func (m *AWS) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AWS.
func (m *AWS) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AWS.
func (m *AWS) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AWS.
func (m *AWS) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AWS.
func (m *AWS) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AWS.
func (m *AWS) GetHealth() bool {
	return m.Healthy
}
func (*AWSConsole) isOneOf_Resource() {}

// GetID returns the unique identifier of the AWSConsole.
func (m *AWSConsole) GetID() string { return m.ID }

// GetName returns the name of the AWSConsole.
func (m *AWSConsole) GetName() string {
	return m.Name
}

// SetName sets the name of the AWSConsole.
func (m *AWSConsole) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AWSConsole.
func (m *AWSConsole) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AWSConsole.
func (m *AWSConsole) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AWSConsole.
func (m *AWSConsole) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AWSConsole.
func (m *AWSConsole) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AWSConsole.
func (m *AWSConsole) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AWSConsole.
func (m *AWSConsole) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AWSConsole.
func (m *AWSConsole) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AWSConsole.
func (m *AWSConsole) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AWSConsole.
func (m *AWSConsole) GetHealth() bool {
	return m.Healthy
}
func (*AWSConsoleStaticKeyPair) isOneOf_Resource() {}

// GetID returns the unique identifier of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) GetID() string { return m.ID }

// GetName returns the name of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) GetName() string {
	return m.Name
}

// SetName sets the name of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AWSConsoleStaticKeyPair.
func (m *AWSConsoleStaticKeyPair) GetHealth() bool {
	return m.Healthy
}
func (*Azure) isOneOf_Resource() {}

// GetID returns the unique identifier of the Azure.
func (m *Azure) GetID() string { return m.ID }

// GetName returns the name of the Azure.
func (m *Azure) GetName() string {
	return m.Name
}

// SetName sets the name of the Azure.
func (m *Azure) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Azure.
func (m *Azure) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Azure.
func (m *Azure) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Azure.
func (m *Azure) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Azure.
func (m *Azure) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Azure.
func (m *Azure) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Azure.
func (m *Azure) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Azure.
func (m *Azure) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Azure.
func (m *Azure) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Azure.
func (m *Azure) GetHealth() bool {
	return m.Healthy
}
func (*AzureCertificate) isOneOf_Resource() {}

// GetID returns the unique identifier of the AzureCertificate.
func (m *AzureCertificate) GetID() string { return m.ID }

// GetName returns the name of the AzureCertificate.
func (m *AzureCertificate) GetName() string {
	return m.Name
}

// SetName sets the name of the AzureCertificate.
func (m *AzureCertificate) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AzureCertificate.
func (m *AzureCertificate) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AzureCertificate.
func (m *AzureCertificate) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AzureCertificate.
func (m *AzureCertificate) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AzureCertificate.
func (m *AzureCertificate) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AzureCertificate.
func (m *AzureCertificate) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AzureCertificate.
func (m *AzureCertificate) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AzureCertificate.
func (m *AzureCertificate) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AzureCertificate.
func (m *AzureCertificate) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AzureCertificate.
func (m *AzureCertificate) GetHealth() bool {
	return m.Healthy
}
func (*AzureMysql) isOneOf_Resource() {}

// GetID returns the unique identifier of the AzureMysql.
func (m *AzureMysql) GetID() string { return m.ID }

// GetName returns the name of the AzureMysql.
func (m *AzureMysql) GetName() string {
	return m.Name
}

// SetName sets the name of the AzureMysql.
func (m *AzureMysql) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AzureMysql.
func (m *AzureMysql) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AzureMysql.
func (m *AzureMysql) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AzureMysql.
func (m *AzureMysql) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AzureMysql.
func (m *AzureMysql) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AzureMysql.
func (m *AzureMysql) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AzureMysql.
func (m *AzureMysql) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AzureMysql.
func (m *AzureMysql) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AzureMysql.
func (m *AzureMysql) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AzureMysql.
func (m *AzureMysql) GetHealth() bool {
	return m.Healthy
}
func (*AzurePostgres) isOneOf_Resource() {}

// GetID returns the unique identifier of the AzurePostgres.
func (m *AzurePostgres) GetID() string { return m.ID }

// GetName returns the name of the AzurePostgres.
func (m *AzurePostgres) GetName() string {
	return m.Name
}

// SetName sets the name of the AzurePostgres.
func (m *AzurePostgres) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the AzurePostgres.
func (m *AzurePostgres) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AzurePostgres.
func (m *AzurePostgres) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the AzurePostgres.
func (m *AzurePostgres) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the AzurePostgres.
func (m *AzurePostgres) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the AzurePostgres.
func (m *AzurePostgres) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the AzurePostgres.
func (m *AzurePostgres) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the AzurePostgres.
func (m *AzurePostgres) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the AzurePostgres.
func (m *AzurePostgres) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of AzurePostgres.
func (m *AzurePostgres) GetHealth() bool {
	return m.Healthy
}
func (*BigQuery) isOneOf_Resource() {}

// GetID returns the unique identifier of the BigQuery.
func (m *BigQuery) GetID() string { return m.ID }

// GetName returns the name of the BigQuery.
func (m *BigQuery) GetName() string {
	return m.Name
}

// SetName sets the name of the BigQuery.
func (m *BigQuery) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the BigQuery.
func (m *BigQuery) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the BigQuery.
func (m *BigQuery) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the BigQuery.
func (m *BigQuery) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the BigQuery.
func (m *BigQuery) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the BigQuery.
func (m *BigQuery) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the BigQuery.
func (m *BigQuery) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the BigQuery.
func (m *BigQuery) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the BigQuery.
func (m *BigQuery) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of BigQuery.
func (m *BigQuery) GetHealth() bool {
	return m.Healthy
}
func (*Cassandra) isOneOf_Resource() {}

// GetID returns the unique identifier of the Cassandra.
func (m *Cassandra) GetID() string { return m.ID }

// GetName returns the name of the Cassandra.
func (m *Cassandra) GetName() string {
	return m.Name
}

// SetName sets the name of the Cassandra.
func (m *Cassandra) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Cassandra.
func (m *Cassandra) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Cassandra.
func (m *Cassandra) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Cassandra.
func (m *Cassandra) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Cassandra.
func (m *Cassandra) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Cassandra.
func (m *Cassandra) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Cassandra.
func (m *Cassandra) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Cassandra.
func (m *Cassandra) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Cassandra.
func (m *Cassandra) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Cassandra.
func (m *Cassandra) GetHealth() bool {
	return m.Healthy
}
func (*Citus) isOneOf_Resource() {}

// GetID returns the unique identifier of the Citus.
func (m *Citus) GetID() string { return m.ID }

// GetName returns the name of the Citus.
func (m *Citus) GetName() string {
	return m.Name
}

// SetName sets the name of the Citus.
func (m *Citus) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Citus.
func (m *Citus) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Citus.
func (m *Citus) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Citus.
func (m *Citus) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Citus.
func (m *Citus) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Citus.
func (m *Citus) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Citus.
func (m *Citus) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Citus.
func (m *Citus) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Citus.
func (m *Citus) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Citus.
func (m *Citus) GetHealth() bool {
	return m.Healthy
}
func (*Clustrix) isOneOf_Resource() {}

// GetID returns the unique identifier of the Clustrix.
func (m *Clustrix) GetID() string { return m.ID }

// GetName returns the name of the Clustrix.
func (m *Clustrix) GetName() string {
	return m.Name
}

// SetName sets the name of the Clustrix.
func (m *Clustrix) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Clustrix.
func (m *Clustrix) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Clustrix.
func (m *Clustrix) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Clustrix.
func (m *Clustrix) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Clustrix.
func (m *Clustrix) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Clustrix.
func (m *Clustrix) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Clustrix.
func (m *Clustrix) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Clustrix.
func (m *Clustrix) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Clustrix.
func (m *Clustrix) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Clustrix.
func (m *Clustrix) GetHealth() bool {
	return m.Healthy
}
func (*Cockroach) isOneOf_Resource() {}

// GetID returns the unique identifier of the Cockroach.
func (m *Cockroach) GetID() string { return m.ID }

// GetName returns the name of the Cockroach.
func (m *Cockroach) GetName() string {
	return m.Name
}

// SetName sets the name of the Cockroach.
func (m *Cockroach) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Cockroach.
func (m *Cockroach) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Cockroach.
func (m *Cockroach) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Cockroach.
func (m *Cockroach) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Cockroach.
func (m *Cockroach) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Cockroach.
func (m *Cockroach) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Cockroach.
func (m *Cockroach) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Cockroach.
func (m *Cockroach) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Cockroach.
func (m *Cockroach) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Cockroach.
func (m *Cockroach) GetHealth() bool {
	return m.Healthy
}
func (*DB2I) isOneOf_Resource() {}

// GetID returns the unique identifier of the DB2I.
func (m *DB2I) GetID() string { return m.ID }

// GetName returns the name of the DB2I.
func (m *DB2I) GetName() string {
	return m.Name
}

// SetName sets the name of the DB2I.
func (m *DB2I) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the DB2I.
func (m *DB2I) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the DB2I.
func (m *DB2I) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the DB2I.
func (m *DB2I) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the DB2I.
func (m *DB2I) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the DB2I.
func (m *DB2I) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the DB2I.
func (m *DB2I) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the DB2I.
func (m *DB2I) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the DB2I.
func (m *DB2I) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of DB2I.
func (m *DB2I) GetHealth() bool {
	return m.Healthy
}
func (*DB2LUW) isOneOf_Resource() {}

// GetID returns the unique identifier of the DB2LUW.
func (m *DB2LUW) GetID() string { return m.ID }

// GetName returns the name of the DB2LUW.
func (m *DB2LUW) GetName() string {
	return m.Name
}

// SetName sets the name of the DB2LUW.
func (m *DB2LUW) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the DB2LUW.
func (m *DB2LUW) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the DB2LUW.
func (m *DB2LUW) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the DB2LUW.
func (m *DB2LUW) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the DB2LUW.
func (m *DB2LUW) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the DB2LUW.
func (m *DB2LUW) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the DB2LUW.
func (m *DB2LUW) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the DB2LUW.
func (m *DB2LUW) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the DB2LUW.
func (m *DB2LUW) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of DB2LUW.
func (m *DB2LUW) GetHealth() bool {
	return m.Healthy
}
func (*DocumentDBHost) isOneOf_Resource() {}

// GetID returns the unique identifier of the DocumentDBHost.
func (m *DocumentDBHost) GetID() string { return m.ID }

// GetName returns the name of the DocumentDBHost.
func (m *DocumentDBHost) GetName() string {
	return m.Name
}

// SetName sets the name of the DocumentDBHost.
func (m *DocumentDBHost) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the DocumentDBHost.
func (m *DocumentDBHost) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the DocumentDBHost.
func (m *DocumentDBHost) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the DocumentDBHost.
func (m *DocumentDBHost) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the DocumentDBHost.
func (m *DocumentDBHost) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the DocumentDBHost.
func (m *DocumentDBHost) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the DocumentDBHost.
func (m *DocumentDBHost) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the DocumentDBHost.
func (m *DocumentDBHost) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the DocumentDBHost.
func (m *DocumentDBHost) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of DocumentDBHost.
func (m *DocumentDBHost) GetHealth() bool {
	return m.Healthy
}
func (*DocumentDBReplicaSet) isOneOf_Resource() {}

// GetID returns the unique identifier of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) GetID() string { return m.ID }

// GetName returns the name of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) GetName() string {
	return m.Name
}

// SetName sets the name of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of DocumentDBReplicaSet.
func (m *DocumentDBReplicaSet) GetHealth() bool {
	return m.Healthy
}
func (*Druid) isOneOf_Resource() {}

// GetID returns the unique identifier of the Druid.
func (m *Druid) GetID() string { return m.ID }

// GetName returns the name of the Druid.
func (m *Druid) GetName() string {
	return m.Name
}

// SetName sets the name of the Druid.
func (m *Druid) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Druid.
func (m *Druid) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Druid.
func (m *Druid) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Druid.
func (m *Druid) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Druid.
func (m *Druid) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Druid.
func (m *Druid) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Druid.
func (m *Druid) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Druid.
func (m *Druid) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Druid.
func (m *Druid) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Druid.
func (m *Druid) GetHealth() bool {
	return m.Healthy
}
func (*DynamoDB) isOneOf_Resource() {}

// GetID returns the unique identifier of the DynamoDB.
func (m *DynamoDB) GetID() string { return m.ID }

// GetName returns the name of the DynamoDB.
func (m *DynamoDB) GetName() string {
	return m.Name
}

// SetName sets the name of the DynamoDB.
func (m *DynamoDB) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the DynamoDB.
func (m *DynamoDB) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the DynamoDB.
func (m *DynamoDB) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the DynamoDB.
func (m *DynamoDB) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the DynamoDB.
func (m *DynamoDB) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the DynamoDB.
func (m *DynamoDB) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the DynamoDB.
func (m *DynamoDB) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the DynamoDB.
func (m *DynamoDB) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the DynamoDB.
func (m *DynamoDB) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of DynamoDB.
func (m *DynamoDB) GetHealth() bool {
	return m.Healthy
}
func (*Elastic) isOneOf_Resource() {}

// GetID returns the unique identifier of the Elastic.
func (m *Elastic) GetID() string { return m.ID }

// GetName returns the name of the Elastic.
func (m *Elastic) GetName() string {
	return m.Name
}

// SetName sets the name of the Elastic.
func (m *Elastic) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Elastic.
func (m *Elastic) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Elastic.
func (m *Elastic) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Elastic.
func (m *Elastic) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Elastic.
func (m *Elastic) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Elastic.
func (m *Elastic) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Elastic.
func (m *Elastic) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Elastic.
func (m *Elastic) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Elastic.
func (m *Elastic) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Elastic.
func (m *Elastic) GetHealth() bool {
	return m.Healthy
}
func (*ElasticacheRedis) isOneOf_Resource() {}

// GetID returns the unique identifier of the ElasticacheRedis.
func (m *ElasticacheRedis) GetID() string { return m.ID }

// GetName returns the name of the ElasticacheRedis.
func (m *ElasticacheRedis) GetName() string {
	return m.Name
}

// SetName sets the name of the ElasticacheRedis.
func (m *ElasticacheRedis) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the ElasticacheRedis.
func (m *ElasticacheRedis) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the ElasticacheRedis.
func (m *ElasticacheRedis) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the ElasticacheRedis.
func (m *ElasticacheRedis) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the ElasticacheRedis.
func (m *ElasticacheRedis) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the ElasticacheRedis.
func (m *ElasticacheRedis) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the ElasticacheRedis.
func (m *ElasticacheRedis) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the ElasticacheRedis.
func (m *ElasticacheRedis) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the ElasticacheRedis.
func (m *ElasticacheRedis) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of ElasticacheRedis.
func (m *ElasticacheRedis) GetHealth() bool {
	return m.Healthy
}
func (*GCP) isOneOf_Resource() {}

// GetID returns the unique identifier of the GCP.
func (m *GCP) GetID() string { return m.ID }

// GetName returns the name of the GCP.
func (m *GCP) GetName() string {
	return m.Name
}

// SetName sets the name of the GCP.
func (m *GCP) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the GCP.
func (m *GCP) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the GCP.
func (m *GCP) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the GCP.
func (m *GCP) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the GCP.
func (m *GCP) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the GCP.
func (m *GCP) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the GCP.
func (m *GCP) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the GCP.
func (m *GCP) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the GCP.
func (m *GCP) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of GCP.
func (m *GCP) GetHealth() bool {
	return m.Healthy
}
func (*GoogleGKE) isOneOf_Resource() {}

// GetID returns the unique identifier of the GoogleGKE.
func (m *GoogleGKE) GetID() string { return m.ID }

// GetName returns the name of the GoogleGKE.
func (m *GoogleGKE) GetName() string {
	return m.Name
}

// SetName sets the name of the GoogleGKE.
func (m *GoogleGKE) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the GoogleGKE.
func (m *GoogleGKE) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the GoogleGKE.
func (m *GoogleGKE) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the GoogleGKE.
func (m *GoogleGKE) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the GoogleGKE.
func (m *GoogleGKE) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the GoogleGKE.
func (m *GoogleGKE) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the GoogleGKE.
func (m *GoogleGKE) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the GoogleGKE.
func (m *GoogleGKE) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the GoogleGKE.
func (m *GoogleGKE) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of GoogleGKE.
func (m *GoogleGKE) GetHealth() bool {
	return m.Healthy
}
func (*GoogleGKEUserImpersonation) isOneOf_Resource() {}

// GetID returns the unique identifier of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) GetID() string { return m.ID }

// GetName returns the name of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) GetName() string {
	return m.Name
}

// SetName sets the name of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of GoogleGKEUserImpersonation.
func (m *GoogleGKEUserImpersonation) GetHealth() bool {
	return m.Healthy
}
func (*Greenplum) isOneOf_Resource() {}

// GetID returns the unique identifier of the Greenplum.
func (m *Greenplum) GetID() string { return m.ID }

// GetName returns the name of the Greenplum.
func (m *Greenplum) GetName() string {
	return m.Name
}

// SetName sets the name of the Greenplum.
func (m *Greenplum) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Greenplum.
func (m *Greenplum) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Greenplum.
func (m *Greenplum) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Greenplum.
func (m *Greenplum) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Greenplum.
func (m *Greenplum) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Greenplum.
func (m *Greenplum) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Greenplum.
func (m *Greenplum) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Greenplum.
func (m *Greenplum) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Greenplum.
func (m *Greenplum) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Greenplum.
func (m *Greenplum) GetHealth() bool {
	return m.Healthy
}
func (*HTTPAuth) isOneOf_Resource() {}

// GetID returns the unique identifier of the HTTPAuth.
func (m *HTTPAuth) GetID() string { return m.ID }

// GetName returns the name of the HTTPAuth.
func (m *HTTPAuth) GetName() string {
	return m.Name
}

// SetName sets the name of the HTTPAuth.
func (m *HTTPAuth) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the HTTPAuth.
func (m *HTTPAuth) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the HTTPAuth.
func (m *HTTPAuth) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the HTTPAuth.
func (m *HTTPAuth) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the HTTPAuth.
func (m *HTTPAuth) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the HTTPAuth.
func (m *HTTPAuth) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the HTTPAuth.
func (m *HTTPAuth) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the HTTPAuth.
func (m *HTTPAuth) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the HTTPAuth.
func (m *HTTPAuth) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of HTTPAuth.
func (m *HTTPAuth) GetHealth() bool {
	return m.Healthy
}
func (*HTTPBasicAuth) isOneOf_Resource() {}

// GetID returns the unique identifier of the HTTPBasicAuth.
func (m *HTTPBasicAuth) GetID() string { return m.ID }

// GetName returns the name of the HTTPBasicAuth.
func (m *HTTPBasicAuth) GetName() string {
	return m.Name
}

// SetName sets the name of the HTTPBasicAuth.
func (m *HTTPBasicAuth) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the HTTPBasicAuth.
func (m *HTTPBasicAuth) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the HTTPBasicAuth.
func (m *HTTPBasicAuth) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the HTTPBasicAuth.
func (m *HTTPBasicAuth) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the HTTPBasicAuth.
func (m *HTTPBasicAuth) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the HTTPBasicAuth.
func (m *HTTPBasicAuth) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the HTTPBasicAuth.
func (m *HTTPBasicAuth) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the HTTPBasicAuth.
func (m *HTTPBasicAuth) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the HTTPBasicAuth.
func (m *HTTPBasicAuth) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of HTTPBasicAuth.
func (m *HTTPBasicAuth) GetHealth() bool {
	return m.Healthy
}
func (*HTTPNoAuth) isOneOf_Resource() {}

// GetID returns the unique identifier of the HTTPNoAuth.
func (m *HTTPNoAuth) GetID() string { return m.ID }

// GetName returns the name of the HTTPNoAuth.
func (m *HTTPNoAuth) GetName() string {
	return m.Name
}

// SetName sets the name of the HTTPNoAuth.
func (m *HTTPNoAuth) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the HTTPNoAuth.
func (m *HTTPNoAuth) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the HTTPNoAuth.
func (m *HTTPNoAuth) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the HTTPNoAuth.
func (m *HTTPNoAuth) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the HTTPNoAuth.
func (m *HTTPNoAuth) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the HTTPNoAuth.
func (m *HTTPNoAuth) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the HTTPNoAuth.
func (m *HTTPNoAuth) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the HTTPNoAuth.
func (m *HTTPNoAuth) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the HTTPNoAuth.
func (m *HTTPNoAuth) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of HTTPNoAuth.
func (m *HTTPNoAuth) GetHealth() bool {
	return m.Healthy
}
func (*Kubernetes) isOneOf_Resource() {}

// GetID returns the unique identifier of the Kubernetes.
func (m *Kubernetes) GetID() string { return m.ID }

// GetName returns the name of the Kubernetes.
func (m *Kubernetes) GetName() string {
	return m.Name
}

// SetName sets the name of the Kubernetes.
func (m *Kubernetes) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Kubernetes.
func (m *Kubernetes) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Kubernetes.
func (m *Kubernetes) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Kubernetes.
func (m *Kubernetes) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Kubernetes.
func (m *Kubernetes) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Kubernetes.
func (m *Kubernetes) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Kubernetes.
func (m *Kubernetes) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Kubernetes.
func (m *Kubernetes) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Kubernetes.
func (m *Kubernetes) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Kubernetes.
func (m *Kubernetes) GetHealth() bool {
	return m.Healthy
}
func (*KubernetesBasicAuth) isOneOf_Resource() {}

// GetID returns the unique identifier of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) GetID() string { return m.ID }

// GetName returns the name of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) GetName() string {
	return m.Name
}

// SetName sets the name of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the KubernetesBasicAuth.
func (m *KubernetesBasicAuth) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of KubernetesBasicAuth.
func (m *KubernetesBasicAuth) GetHealth() bool {
	return m.Healthy
}
func (*KubernetesServiceAccount) isOneOf_Resource() {}

// GetID returns the unique identifier of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) GetID() string { return m.ID }

// GetName returns the name of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) GetName() string {
	return m.Name
}

// SetName sets the name of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the KubernetesServiceAccount.
func (m *KubernetesServiceAccount) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of KubernetesServiceAccount.
func (m *KubernetesServiceAccount) GetHealth() bool {
	return m.Healthy
}
func (*KubernetesServiceAccountUserImpersonation) isOneOf_Resource() {}

// GetID returns the unique identifier of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) GetID() string { return m.ID }

// GetName returns the name of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) GetName() string {
	return m.Name
}

// SetName sets the name of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of KubernetesServiceAccountUserImpersonation.
func (m *KubernetesServiceAccountUserImpersonation) GetHealth() bool {
	return m.Healthy
}
func (*KubernetesUserImpersonation) isOneOf_Resource() {}

// GetID returns the unique identifier of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) GetID() string { return m.ID }

// GetName returns the name of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) GetName() string {
	return m.Name
}

// SetName sets the name of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of KubernetesUserImpersonation.
func (m *KubernetesUserImpersonation) GetHealth() bool {
	return m.Healthy
}
func (*Maria) isOneOf_Resource() {}

// GetID returns the unique identifier of the Maria.
func (m *Maria) GetID() string { return m.ID }

// GetName returns the name of the Maria.
func (m *Maria) GetName() string {
	return m.Name
}

// SetName sets the name of the Maria.
func (m *Maria) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Maria.
func (m *Maria) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Maria.
func (m *Maria) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Maria.
func (m *Maria) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Maria.
func (m *Maria) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Maria.
func (m *Maria) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Maria.
func (m *Maria) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Maria.
func (m *Maria) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Maria.
func (m *Maria) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Maria.
func (m *Maria) GetHealth() bool {
	return m.Healthy
}
func (*Memcached) isOneOf_Resource() {}

// GetID returns the unique identifier of the Memcached.
func (m *Memcached) GetID() string { return m.ID }

// GetName returns the name of the Memcached.
func (m *Memcached) GetName() string {
	return m.Name
}

// SetName sets the name of the Memcached.
func (m *Memcached) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Memcached.
func (m *Memcached) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Memcached.
func (m *Memcached) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Memcached.
func (m *Memcached) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Memcached.
func (m *Memcached) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Memcached.
func (m *Memcached) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Memcached.
func (m *Memcached) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Memcached.
func (m *Memcached) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Memcached.
func (m *Memcached) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Memcached.
func (m *Memcached) GetHealth() bool {
	return m.Healthy
}
func (*Memsql) isOneOf_Resource() {}

// GetID returns the unique identifier of the Memsql.
func (m *Memsql) GetID() string { return m.ID }

// GetName returns the name of the Memsql.
func (m *Memsql) GetName() string {
	return m.Name
}

// SetName sets the name of the Memsql.
func (m *Memsql) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Memsql.
func (m *Memsql) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Memsql.
func (m *Memsql) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Memsql.
func (m *Memsql) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Memsql.
func (m *Memsql) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Memsql.
func (m *Memsql) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Memsql.
func (m *Memsql) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Memsql.
func (m *Memsql) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Memsql.
func (m *Memsql) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Memsql.
func (m *Memsql) GetHealth() bool {
	return m.Healthy
}
func (*MongoHost) isOneOf_Resource() {}

// GetID returns the unique identifier of the MongoHost.
func (m *MongoHost) GetID() string { return m.ID }

// GetName returns the name of the MongoHost.
func (m *MongoHost) GetName() string {
	return m.Name
}

// SetName sets the name of the MongoHost.
func (m *MongoHost) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the MongoHost.
func (m *MongoHost) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the MongoHost.
func (m *MongoHost) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the MongoHost.
func (m *MongoHost) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the MongoHost.
func (m *MongoHost) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the MongoHost.
func (m *MongoHost) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the MongoHost.
func (m *MongoHost) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the MongoHost.
func (m *MongoHost) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the MongoHost.
func (m *MongoHost) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Memsql.
func (m *MongoHost) GetHealth() bool {
	return m.Healthy
}
func (*MongoLegacyHost) isOneOf_Resource() {}

// GetID returns the unique identifier of the MongoLegacyHost.
func (m *MongoLegacyHost) GetID() string { return m.ID }

// GetName returns the name of the MongoLegacyHost.
func (m *MongoLegacyHost) GetName() string {
	return m.Name
}

// SetName sets the name of the MongoLegacyHost.
func (m *MongoLegacyHost) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the MongoLegacyHost.
func (m *MongoLegacyHost) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the MongoLegacyHost.
func (m *MongoLegacyHost) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the MongoLegacyHost.
func (m *MongoLegacyHost) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the MongoLegacyHost.
func (m *MongoLegacyHost) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the MongoLegacyHost.
func (m *MongoLegacyHost) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the MongoLegacyHost.
func (m *MongoLegacyHost) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the MongoLegacyHost.
func (m *MongoLegacyHost) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the MongoLegacyHost.
func (m *MongoLegacyHost) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of MongoLegacyHost.
func (m *MongoLegacyHost) GetHealth() bool {
	return m.Healthy
}
func (*MongoLegacyReplicaset) isOneOf_Resource() {}

// GetID returns the unique identifier of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) GetID() string { return m.ID }

// GetName returns the name of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) GetName() string {
	return m.Name
}

// SetName sets the name of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of MongoLegacyReplicaset.
func (m *MongoLegacyReplicaset) GetHealth() bool {
	return m.Healthy
}
func (*MongoReplicaSet) isOneOf_Resource() {}

// GetID returns the unique identifier of the MongoReplicaSet.
func (m *MongoReplicaSet) GetID() string { return m.ID }

// GetName returns the name of the MongoReplicaSet.
func (m *MongoReplicaSet) GetName() string {
	return m.Name
}

// SetName sets the name of the MongoReplicaSet.
func (m *MongoReplicaSet) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the MongoReplicaSet.
func (m *MongoReplicaSet) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the MongoReplicaSet.
func (m *MongoReplicaSet) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the MongoReplicaSet.
func (m *MongoReplicaSet) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the MongoReplicaSet.
func (m *MongoReplicaSet) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the MongoReplicaSet.
func (m *MongoReplicaSet) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the MongoReplicaSet.
func (m *MongoReplicaSet) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the MongoReplicaSet.
func (m *MongoReplicaSet) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the MongoReplicaSet.
func (m *MongoReplicaSet) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of MongoReplicaSet.
func (m *MongoReplicaSet) GetHealth() bool {
	return m.Healthy
}
func (*MongoShardedCluster) isOneOf_Resource() {}

// GetID returns the unique identifier of the MongoShardedCluster.
func (m *MongoShardedCluster) GetID() string { return m.ID }

// GetName returns the name of the MongoShardedCluster.
func (m *MongoShardedCluster) GetName() string {
	return m.Name
}

// SetName sets the name of the MongoShardedCluster.
func (m *MongoShardedCluster) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the MongoShardedCluster.
func (m *MongoShardedCluster) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the MongoShardedCluster.
func (m *MongoShardedCluster) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the MongoShardedCluster.
func (m *MongoShardedCluster) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the MongoShardedCluster.
func (m *MongoShardedCluster) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the MongoShardedCluster.
func (m *MongoShardedCluster) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the MongoShardedCluster.
func (m *MongoShardedCluster) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the MongoShardedCluster.
func (m *MongoShardedCluster) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the MongoShardedCluster.
func (m *MongoShardedCluster) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of MongoShardedCluster.
func (m *MongoShardedCluster) GetHealth() bool {
	return m.Healthy
}
func (*MTLSMysql) isOneOf_Resource() {}

// GetID returns the unique identifier of the MTLSMysql.
func (m *MTLSMysql) GetID() string { return m.ID }

// GetName returns the name of the MTLSMysql.
func (m *MTLSMysql) GetName() string {
	return m.Name
}

// SetName sets the name of the MTLSMysql.
func (m *MTLSMysql) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the MTLSMysql.
func (m *MTLSMysql) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the MTLSMysql.
func (m *MTLSMysql) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the MTLSMysql.
func (m *MTLSMysql) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the MTLSMysql.
func (m *MTLSMysql) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the MTLSMysql.
func (m *MTLSMysql) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the MTLSMysql.
func (m *MTLSMysql) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the MTLSMysql.
func (m *MTLSMysql) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the MTLSMysql.
func (m *MTLSMysql) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of MongoShardedCluster.
func (m *MTLSMysql) GetHealth() bool {
	return m.Healthy
}
func (*MTLSPostgres) isOneOf_Resource() {}

// GetID returns the unique identifier of the MTLSPostgres.
func (m *MTLSPostgres) GetID() string { return m.ID }

// GetName returns the name of the MTLSPostgres.
func (m *MTLSPostgres) GetName() string {
	return m.Name
}

// SetName sets the name of the MTLSPostgres.
func (m *MTLSPostgres) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the MTLSPostgres.
func (m *MTLSPostgres) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the MTLSPostgres.
func (m *MTLSPostgres) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the MTLSPostgres.
func (m *MTLSPostgres) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the MTLSPostgres.
func (m *MTLSPostgres) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the MTLSPostgres.
func (m *MTLSPostgres) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the MTLSPostgres.
func (m *MTLSPostgres) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the MTLSPostgres.
func (m *MTLSPostgres) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the MTLSPostgres.
func (m *MTLSPostgres) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of MTLSPostgres.
func (m *MTLSPostgres) GetHealth() bool {
	return m.Healthy
}
func (*Mysql) isOneOf_Resource() {}

// GetID returns the unique identifier of the Mysql.
func (m *Mysql) GetID() string { return m.ID }

// GetName returns the name of the Mysql.
func (m *Mysql) GetName() string {
	return m.Name
}

// SetName sets the name of the Mysql.
func (m *Mysql) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Mysql.
func (m *Mysql) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Mysql.
func (m *Mysql) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Mysql.
func (m *Mysql) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Mysql.
func (m *Mysql) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Mysql.
func (m *Mysql) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Mysql.
func (m *Mysql) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Mysql.
func (m *Mysql) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Mysql.
func (m *Mysql) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of MTLSPostgres.
func (m *Mysql) GetHealth() bool {
	return m.Healthy
}
func (*Neptune) isOneOf_Resource() {}

// GetID returns the unique identifier of the Neptune.
func (m *Neptune) GetID() string { return m.ID }

// GetName returns the name of the Neptune.
func (m *Neptune) GetName() string {
	return m.Name
}

// SetName sets the name of the Neptune.
func (m *Neptune) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Neptune.
func (m *Neptune) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Neptune.
func (m *Neptune) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Neptune.
func (m *Neptune) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Neptune.
func (m *Neptune) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Neptune.
func (m *Neptune) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Neptune.
func (m *Neptune) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Neptune.
func (m *Neptune) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Neptune.
func (m *Neptune) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Neptune.
func (m *Neptune) GetHealth() bool {
	return m.Healthy
}
func (*NeptuneIAM) isOneOf_Resource() {}

// GetID returns the unique identifier of the NeptuneIAM.
func (m *NeptuneIAM) GetID() string { return m.ID }

// GetName returns the name of the NeptuneIAM.
func (m *NeptuneIAM) GetName() string {
	return m.Name
}

// SetName sets the name of the NeptuneIAM.
func (m *NeptuneIAM) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the NeptuneIAM.
func (m *NeptuneIAM) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the NeptuneIAM.
func (m *NeptuneIAM) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the NeptuneIAM.
func (m *NeptuneIAM) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the NeptuneIAM.
func (m *NeptuneIAM) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the NeptuneIAM.
func (m *NeptuneIAM) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the NeptuneIAM.
func (m *NeptuneIAM) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the NeptuneIAM.
func (m *NeptuneIAM) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the NeptuneIAM.
func (m *NeptuneIAM) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of NeptuneIAM.
func (m *NeptuneIAM) GetHealth() bool {
	return m.Healthy
}
func (*Oracle) isOneOf_Resource() {}

// GetID returns the unique identifier of the Oracle.
func (m *Oracle) GetID() string { return m.ID }

// GetName returns the name of the Oracle.
func (m *Oracle) GetName() string {
	return m.Name
}

// SetName sets the name of the Oracle.
func (m *Oracle) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Oracle.
func (m *Oracle) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Oracle.
func (m *Oracle) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Oracle.
func (m *Oracle) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Oracle.
func (m *Oracle) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Oracle.
func (m *Oracle) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Oracle.
func (m *Oracle) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Oracle.
func (m *Oracle) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Oracle.
func (m *Oracle) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Oracle.
func (m *Oracle) GetHealth() bool {
	return m.Healthy
}
func (*Postgres) isOneOf_Resource() {}

// GetID returns the unique identifier of the Postgres.
func (m *Postgres) GetID() string { return m.ID }

// GetName returns the name of the Postgres.
func (m *Postgres) GetName() string {
	return m.Name
}

// SetName sets the name of the Postgres.
func (m *Postgres) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Postgres.
func (m *Postgres) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Postgres.
func (m *Postgres) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Postgres.
func (m *Postgres) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Postgres.
func (m *Postgres) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Postgres.
func (m *Postgres) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Postgres.
func (m *Postgres) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Postgres.
func (m *Postgres) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Postgres.
func (m *Postgres) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Postgres.
func (m *Postgres) GetHealth() bool {
	return m.Healthy
}
func (*Presto) isOneOf_Resource() {}

// GetID returns the unique identifier of the Presto.
func (m *Presto) GetID() string { return m.ID }

// GetName returns the name of the Presto.
func (m *Presto) GetName() string {
	return m.Name
}

// SetName sets the name of the Presto.
func (m *Presto) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Presto.
func (m *Presto) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Presto.
func (m *Presto) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Presto.
func (m *Presto) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Presto.
func (m *Presto) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Presto.
func (m *Presto) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Presto.
func (m *Presto) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Presto.
func (m *Presto) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Presto.
func (m *Presto) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Presto.
func (m *Presto) GetHealth() bool {
	return m.Healthy
}
func (*RabbitMQAMQP091) isOneOf_Resource() {}

// GetID returns the unique identifier of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) GetID() string { return m.ID }

// GetName returns the name of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) GetName() string {
	return m.Name
}

// SetName sets the name of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the RabbitMQAMQP091.
func (m *RabbitMQAMQP091) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of RabbitMQAMQP091.
func (m *RabbitMQAMQP091) GetHealth() bool {
	return m.Healthy
}
func (*RawTCP) isOneOf_Resource() {}

// GetID returns the unique identifier of the RawTCP.
func (m *RawTCP) GetID() string { return m.ID }

// GetName returns the name of the RawTCP.
func (m *RawTCP) GetName() string {
	return m.Name
}

// SetName sets the name of the RawTCP.
func (m *RawTCP) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the RawTCP.
func (m *RawTCP) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the RawTCP.
func (m *RawTCP) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the RawTCP.
func (m *RawTCP) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the RawTCP.
func (m *RawTCP) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the RawTCP.
func (m *RawTCP) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the RawTCP.
func (m *RawTCP) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the RawTCP.
func (m *RawTCP) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the RawTCP.
func (m *RawTCP) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of RawTCP.
func (m *RawTCP) GetHealth() bool {
	return m.Healthy
}
func (*RDP) isOneOf_Resource() {}

// GetID returns the unique identifier of the RDP.
func (m *RDP) GetID() string { return m.ID }

// GetName returns the name of the RDP.
func (m *RDP) GetName() string {
	return m.Name
}

// SetName sets the name of the RDP.
func (m *RDP) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the RDP.
func (m *RDP) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the RDP.
func (m *RDP) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the RDP.
func (m *RDP) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the RDP.
func (m *RDP) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the RDP.
func (m *RDP) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the RDP.
func (m *RDP) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the RDP.
func (m *RDP) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the RDP.
func (m *RDP) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of RDP.
func (m *RDP) GetHealth() bool {
	return m.Healthy
}
func (*Redis) isOneOf_Resource() {}

// GetID returns the unique identifier of the Redis.
func (m *Redis) GetID() string { return m.ID }

// GetName returns the name of the Redis.
func (m *Redis) GetName() string {
	return m.Name
}

// SetName sets the name of the Redis.
func (m *Redis) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Redis.
func (m *Redis) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Redis.
func (m *Redis) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Redis.
func (m *Redis) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Redis.
func (m *Redis) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Redis.
func (m *Redis) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Redis.
func (m *Redis) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Redis.
func (m *Redis) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Redis.
func (m *Redis) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Redis.
func (m *Redis) GetHealth() bool {
	return m.Healthy
}
func (*Redshift) isOneOf_Resource() {}

// GetID returns the unique identifier of the Redshift.
func (m *Redshift) GetID() string { return m.ID }

// GetName returns the name of the Redshift.
func (m *Redshift) GetName() string {
	return m.Name
}

// SetName sets the name of the Redshift.
func (m *Redshift) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Redshift.
func (m *Redshift) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Redshift.
func (m *Redshift) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Redshift.
func (m *Redshift) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Redshift.
func (m *Redshift) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Redshift.
func (m *Redshift) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Redshift.
func (m *Redshift) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Redshift.
func (m *Redshift) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Redshift.
func (m *Redshift) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Redshift.
func (m *Redshift) GetHealth() bool {
	return m.Healthy
}
func (*SingleStore) isOneOf_Resource() {}

// GetID returns the unique identifier of the SingleStore.
func (m *SingleStore) GetID() string { return m.ID }

// GetName returns the name of the SingleStore.
func (m *SingleStore) GetName() string {
	return m.Name
}

// SetName sets the name of the SingleStore.
func (m *SingleStore) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the SingleStore.
func (m *SingleStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the SingleStore.
func (m *SingleStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the SingleStore.
func (m *SingleStore) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the SingleStore.
func (m *SingleStore) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the SingleStore.
func (m *SingleStore) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the SingleStore.
func (m *SingleStore) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the SingleStore.
func (m *SingleStore) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the SingleStore.
func (m *SingleStore) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of SingleStore.
func (m *SingleStore) GetHealth() bool {
	return m.Healthy
}
func (*Snowflake) isOneOf_Resource() {}

// GetID returns the unique identifier of the Snowflake.
func (m *Snowflake) GetID() string { return m.ID }

// GetName returns the name of the Snowflake.
func (m *Snowflake) GetName() string {
	return m.Name
}

// SetName sets the name of the Snowflake.
func (m *Snowflake) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Snowflake.
func (m *Snowflake) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Snowflake.
func (m *Snowflake) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Snowflake.
func (m *Snowflake) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Snowflake.
func (m *Snowflake) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Snowflake.
func (m *Snowflake) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Snowflake.
func (m *Snowflake) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Snowflake.
func (m *Snowflake) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Snowflake.
func (m *Snowflake) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Snowflake.
func (m *Snowflake) GetHealth() bool {
	return m.Healthy
}
func (*Snowsight) isOneOf_Resource() {}

// GetID returns the unique identifier of the Snowsight.
func (m *Snowsight) GetID() string { return m.ID }

// GetName returns the name of the Snowsight.
func (m *Snowsight) GetName() string {
	return m.Name
}

// SetName sets the name of the Snowsight.
func (m *Snowsight) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Snowsight.
func (m *Snowsight) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Snowsight.
func (m *Snowsight) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Snowsight.
func (m *Snowsight) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Snowsight.
func (m *Snowsight) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Snowsight.
func (m *Snowsight) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Snowsight.
func (m *Snowsight) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Snowsight.
func (m *Snowsight) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Snowsight.
func (m *Snowsight) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Snowsight.
func (m *Snowsight) GetHealth() bool {
	return m.Healthy
}
func (*SQLServer) isOneOf_Resource() {}

// GetID returns the unique identifier of the SQLServer.
func (m *SQLServer) GetID() string { return m.ID }

// GetName returns the name of the SQLServer.
func (m *SQLServer) GetName() string {
	return m.Name
}

// SetName sets the name of the SQLServer.
func (m *SQLServer) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the SQLServer.
func (m *SQLServer) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the SQLServer.
func (m *SQLServer) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the SQLServer.
func (m *SQLServer) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the SQLServer.
func (m *SQLServer) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the SQLServer.
func (m *SQLServer) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the SQLServer.
func (m *SQLServer) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the SQLServer.
func (m *SQLServer) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the SQLServer.
func (m *SQLServer) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of SQLServer.
func (m *SQLServer) GetHealth() bool {
	return m.Healthy
}
func (*SSH) isOneOf_Resource() {}

// GetID returns the unique identifier of the SSH.
func (m *SSH) GetID() string { return m.ID }

// GetName returns the name of the SSH.
func (m *SSH) GetName() string {
	return m.Name
}

// SetName sets the name of the SSH.
func (m *SSH) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the SSH.
func (m *SSH) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the SSH.
func (m *SSH) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the SSH.
func (m *SSH) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the SSH.
func (m *SSH) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the SSH.
func (m *SSH) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the SSH.
func (m *SSH) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the SSH.
func (m *SSH) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the SSH.
func (m *SSH) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of SSH.
func (m *SSH) GetHealth() bool {
	return m.Healthy
}
func (*SSHCert) isOneOf_Resource() {}

// GetID returns the unique identifier of the SSHCert.
func (m *SSHCert) GetID() string { return m.ID }

// GetName returns the name of the SSHCert.
func (m *SSHCert) GetName() string {
	return m.Name
}

// SetName sets the name of the SSHCert.
func (m *SSHCert) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the SSHCert.
func (m *SSHCert) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the SSHCert.
func (m *SSHCert) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the SSHCert.
func (m *SSHCert) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the SSHCert.
func (m *SSHCert) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the SSHCert.
func (m *SSHCert) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the SSHCert.
func (m *SSHCert) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the SSHCert.
func (m *SSHCert) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the SSHCert.
func (m *SSHCert) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of SSH.
func (m *SSHCert) GetHealth() bool {
	return m.Healthy
}
func (*SSHCustomerKey) isOneOf_Resource() {}

// GetID returns the unique identifier of the SSHCustomerKey.
func (m *SSHCustomerKey) GetID() string { return m.ID }

// GetName returns the name of the SSHCustomerKey.
func (m *SSHCustomerKey) GetName() string {
	return m.Name
}

// SetName sets the name of the SSHCustomerKey.
func (m *SSHCustomerKey) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the SSHCustomerKey.
func (m *SSHCustomerKey) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the SSHCustomerKey.
func (m *SSHCustomerKey) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the SSHCustomerKey.
func (m *SSHCustomerKey) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the SSHCustomerKey.
func (m *SSHCustomerKey) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the SSHCustomerKey.
func (m *SSHCustomerKey) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the SSHCustomerKey.
func (m *SSHCustomerKey) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the SSHCustomerKey.
func (m *SSHCustomerKey) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the SSHCustomerKey.
func (m *SSHCustomerKey) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of SSHCustomerKey.
func (m *SSHCustomerKey) GetHealth() bool {
	return m.Healthy
}
func (*Sybase) isOneOf_Resource() {}

// GetID returns the unique identifier of the Sybase.
func (m *Sybase) GetID() string { return m.ID }

// GetName returns the name of the Sybase.
func (m *Sybase) GetName() string {
	return m.Name
}

// SetName sets the name of the Sybase.
func (m *Sybase) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Sybase.
func (m *Sybase) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Sybase.
func (m *Sybase) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Sybase.
func (m *Sybase) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Sybase.
func (m *Sybase) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Sybase.
func (m *Sybase) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Sybase.
func (m *Sybase) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Sybase.
func (m *Sybase) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Sybase.
func (m *Sybase) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Sybase.
func (m *Sybase) GetHealth() bool {
	return m.Healthy
}
func (*SybaseIQ) isOneOf_Resource() {}

// GetID returns the unique identifier of the SybaseIQ.
func (m *SybaseIQ) GetID() string { return m.ID }

// GetName returns the name of the SybaseIQ.
func (m *SybaseIQ) GetName() string {
	return m.Name
}

// SetName sets the name of the SybaseIQ.
func (m *SybaseIQ) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the SybaseIQ.
func (m *SybaseIQ) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the SybaseIQ.
func (m *SybaseIQ) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the SybaseIQ.
func (m *SybaseIQ) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the SybaseIQ.
func (m *SybaseIQ) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the SybaseIQ.
func (m *SybaseIQ) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the SybaseIQ.
func (m *SybaseIQ) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the SybaseIQ.
func (m *SybaseIQ) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the SybaseIQ.
func (m *SybaseIQ) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of SybaseIQ.
func (m *SybaseIQ) GetHealth() bool {
	return m.Healthy
}
func (*Teradata) isOneOf_Resource() {}

// GetID returns the unique identifier of the Teradata.
func (m *Teradata) GetID() string { return m.ID }

// GetName returns the name of the Teradata.
func (m *Teradata) GetName() string {
	return m.Name
}

// SetName sets the name of the Teradata.
func (m *Teradata) SetName(v string) {
	m.Name = v
}

// GetTags returns the tags of the Teradata.
func (m *Teradata) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the Teradata.
func (m *Teradata) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetSecretStoreID returns the secret store id of the Teradata.
func (m *Teradata) GetSecretStoreID() string {
	return m.SecretStoreID
}

// SetSecretStoreID sets the secret store id of the Teradata.
func (m *Teradata) SetSecretStoreID(v string) {
	m.SecretStoreID = v
}

// GetEgressFilter returns the egress filter of the Teradata.
func (m *Teradata) GetEgressFilter() string {
	return m.EgressFilter
}

// SetEgressFilter sets the egress filter of the Teradata.
func (m *Teradata) SetEgressFilter(v string) {
	m.EgressFilter = v
}

// GetBindInterface returns the bind interface of the Teradata.
func (m *Teradata) GetBindInterface() string {
	return m.BindInterface
}

// SetBindInterface sets the bind interface of the Teradata.
func (m *Teradata) SetBindInterface(v string) {
	m.BindInterface = v
}

// GetHealth gets the Health of Teradata.
func (m *Teradata) GetHealth() bool {
	return m.Healthy
}
// ResourceCreateResponse reports how the Resources were created in the system.
type ResourceCreateResponse struct {
	// Reserved for future use.
	Meta *CreateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The created Resource.
	Resource Resource `json:"resource"`
}

// ResourceDeleteResponse returns information about a Resource that was deleted.
type ResourceDeleteResponse struct {
	// Reserved for future use.
	Meta *DeleteResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// ResourceGetResponse returns a requested Resource.
type ResourceGetResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The requested Resource.
	Resource Resource `json:"resource"`
}

// ResourceUpdateResponse returns the fields of a Resource after it has been updated by
// a ResourceUpdateRequest.
type ResourceUpdateResponse struct {
	// Reserved for future use.
	Meta *UpdateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The updated Resource.
	Resource Resource `json:"resource"`
}

// A Role has a list of access rules which determine which Resources the members
// of the Role have access to. An Account can be a member of multiple Roles via
// AccountAttachments.
type Role struct {
	// AccessRules is a list of access rules defining the resources this Role has access to.
	AccessRules AccessRules `json:"accessRules"`
	// Unique identifier of the Role.
	ID string `json:"id"`
	// Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.
	ManagedBy string `json:"managedBy"`
	// Unique human-readable name of the Role.
	Name string `json:"name"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// RoleCreateResponse reports how the Roles were created in the system. It can
// communicate partial successes or failures.
type RoleCreateResponse struct {
	// Reserved for future use.
	Meta *CreateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The created Role.
	Role *Role `json:"role"`
}

// RoleDeleteResponse returns information about a Role that was deleted.
type RoleDeleteResponse struct {
	// Reserved for future use.
	Meta *DeleteResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// RoleGetResponse returns a requested Role.
type RoleGetResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The requested Role.
	Role *Role `json:"role"`
}

// RoleUpdateResponse returns the fields of a Role after it has been updated by
// a RoleUpdateRequest.
type RoleUpdateResponse struct {
	// Reserved for future use.
	Meta *UpdateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The updated Role.
	Role *Role `json:"role"`
}

type SQLServer struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	OverrideDatabase bool `json:"overrideDatabase"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`

	Schema string `json:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type SSH struct {
	AllowDeprecatedKeyExchanges bool `json:"allowDeprecatedKeyExchanges"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`

	KeyType string `json:"keyType"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortForwarding bool `json:"portForwarding"`

	PortOverride int32 `json:"portOverride"`

	PublicKey string `json:"publicKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type SSHCert struct {
	AllowDeprecatedKeyExchanges bool `json:"allowDeprecatedKeyExchanges"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`

	KeyType string `json:"keyType"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortForwarding bool `json:"portForwarding"`

	PortOverride int32 `json:"portOverride"`

	RemoteIdentityGroupID string `json:"remoteIdentityGroupId"`

	RemoteIdentityHealthcheckUsername string `json:"remoteIdentityHealthcheckUsername"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type SSHCustomerKey struct {
	AllowDeprecatedKeyExchanges bool `json:"allowDeprecatedKeyExchanges"`
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Port int32 `json:"port"`

	PortForwarding bool `json:"portForwarding"`

	PortOverride int32 `json:"portOverride"`

	PrivateKey string `json:"privateKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

// A SecretStore is a server where resource secrets (passwords, keys) are stored.
// Coming soon support for HashiCorp Vault and AWS Secret Store. Contact support@strongdm.com to request access to the beta.
type SecretStore interface {
	// GetID returns the unique identifier of the SecretStore.
	GetID() string
	// GetTags returns the tags of the SecretStore.
	GetTags() Tags
	// SetTags sets the tags of the SecretStore.
	SetTags(Tags)
	// GetName returns the name of the SecretStore.
	GetName() string
	// SetName sets the name of the SecretStore.
	SetName(string)
	isOneOf_SecretStore()
}

func (*AWSStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the AWSStore.
func (m *AWSStore) GetID() string { return m.ID }

// GetTags returns the tags of the AWSStore.
func (m *AWSStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AWSStore.
func (m *AWSStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the AWSStore.
func (m *AWSStore) GetName() string {
	return m.Name
}

// SetName sets the name of the AWSStore.
func (m *AWSStore) SetName(v string) {
	m.Name = v
}
func (*AzureStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the AzureStore.
func (m *AzureStore) GetID() string { return m.ID }

// GetTags returns the tags of the AzureStore.
func (m *AzureStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the AzureStore.
func (m *AzureStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the AzureStore.
func (m *AzureStore) GetName() string {
	return m.Name
}

// SetName sets the name of the AzureStore.
func (m *AzureStore) SetName(v string) {
	m.Name = v
}
func (*CyberarkConjurStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the CyberarkConjurStore.
func (m *CyberarkConjurStore) GetID() string { return m.ID }

// GetTags returns the tags of the CyberarkConjurStore.
func (m *CyberarkConjurStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the CyberarkConjurStore.
func (m *CyberarkConjurStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the CyberarkConjurStore.
func (m *CyberarkConjurStore) GetName() string {
	return m.Name
}

// SetName sets the name of the CyberarkConjurStore.
func (m *CyberarkConjurStore) SetName(v string) {
	m.Name = v
}
func (*CyberarkPAMStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the CyberarkPAMStore.
func (m *CyberarkPAMStore) GetID() string { return m.ID }

// GetTags returns the tags of the CyberarkPAMStore.
func (m *CyberarkPAMStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the CyberarkPAMStore.
func (m *CyberarkPAMStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the CyberarkPAMStore.
func (m *CyberarkPAMStore) GetName() string {
	return m.Name
}

// SetName sets the name of the CyberarkPAMStore.
func (m *CyberarkPAMStore) SetName(v string) {
	m.Name = v
}
func (*CyberarkPAMExperimentalStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the CyberarkPAMExperimentalStore.
func (m *CyberarkPAMExperimentalStore) GetID() string { return m.ID }

// GetTags returns the tags of the CyberarkPAMExperimentalStore.
func (m *CyberarkPAMExperimentalStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the CyberarkPAMExperimentalStore.
func (m *CyberarkPAMExperimentalStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the CyberarkPAMExperimentalStore.
func (m *CyberarkPAMExperimentalStore) GetName() string {
	return m.Name
}

// SetName sets the name of the CyberarkPAMExperimentalStore.
func (m *CyberarkPAMExperimentalStore) SetName(v string) {
	m.Name = v
}
func (*DelineaStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the DelineaStore.
func (m *DelineaStore) GetID() string { return m.ID }

// GetTags returns the tags of the DelineaStore.
func (m *DelineaStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the DelineaStore.
func (m *DelineaStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the DelineaStore.
func (m *DelineaStore) GetName() string {
	return m.Name
}

// SetName sets the name of the DelineaStore.
func (m *DelineaStore) SetName(v string) {
	m.Name = v
}
func (*GCPStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the GCPStore.
func (m *GCPStore) GetID() string { return m.ID }

// GetTags returns the tags of the GCPStore.
func (m *GCPStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the GCPStore.
func (m *GCPStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the GCPStore.
func (m *GCPStore) GetName() string {
	return m.Name
}

// SetName sets the name of the GCPStore.
func (m *GCPStore) SetName(v string) {
	m.Name = v
}
func (*VaultAppRoleStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the VaultAppRoleStore.
func (m *VaultAppRoleStore) GetID() string { return m.ID }

// GetTags returns the tags of the VaultAppRoleStore.
func (m *VaultAppRoleStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the VaultAppRoleStore.
func (m *VaultAppRoleStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the VaultAppRoleStore.
func (m *VaultAppRoleStore) GetName() string {
	return m.Name
}

// SetName sets the name of the VaultAppRoleStore.
func (m *VaultAppRoleStore) SetName(v string) {
	m.Name = v
}
func (*VaultTLSStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the VaultTLSStore.
func (m *VaultTLSStore) GetID() string { return m.ID }

// GetTags returns the tags of the VaultTLSStore.
func (m *VaultTLSStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the VaultTLSStore.
func (m *VaultTLSStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the VaultTLSStore.
func (m *VaultTLSStore) GetName() string {
	return m.Name
}

// SetName sets the name of the VaultTLSStore.
func (m *VaultTLSStore) SetName(v string) {
	m.Name = v
}
func (*VaultTokenStore) isOneOf_SecretStore() {}

// GetID returns the unique identifier of the VaultTokenStore.
func (m *VaultTokenStore) GetID() string { return m.ID }

// GetTags returns the tags of the VaultTokenStore.
func (m *VaultTokenStore) GetTags() Tags {
	return m.Tags.clone()
}

// SetTags sets the tags of the VaultTokenStore.
func (m *VaultTokenStore) SetTags(v Tags) {
	m.Tags = v.clone()
}

// GetName returns the name of the VaultTokenStore.
func (m *VaultTokenStore) GetName() string {
	return m.Name
}

// SetName sets the name of the VaultTokenStore.
func (m *VaultTokenStore) SetName(v string) {
	m.Name = v
}

// SecretStoreCreateResponse reports how the SecretStores were created in the system.
type SecretStoreCreateResponse struct {
	// Reserved for future use.
	Meta *CreateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The created SecretStore.
	SecretStore SecretStore `json:"secretStore"`
}

// SecretStoreDeleteResponse returns information about a SecretStore that was deleted.
type SecretStoreDeleteResponse struct {
	// Reserved for future use.
	Meta *DeleteResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
}

// SecretStoreGetResponse returns a requested SecretStore.
type SecretStoreGetResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The requested SecretStore.
	SecretStore SecretStore `json:"secretStore"`
}

// SecretStoreUpdateResponse returns the fields of a SecretStore after it has been updated by
// a SecretStoreUpdateRequest.
type SecretStoreUpdateResponse struct {
	// Reserved for future use.
	Meta *UpdateResponseMetadata `json:"meta"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `json:"rateLimit"`
	// The updated SecretStore.
	SecretStore SecretStore `json:"secretStore"`
}

// A Service is a service account that can connect to resources they are granted
// directly, or granted via roles. Services are typically automated jobs.
type Service struct {
	// Unique identifier of the Service.
	ID string `json:"id"`
	// Unique human-readable name of the Service.
	Name string `json:"name"`
	// The Service's suspended state.
	Suspended bool `json:"suspended"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type SingleStore struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Snowflake struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`

	Database string `json:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	PortOverride int32 `json:"portOverride"`

	Schema string `json:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

// Snowsight is currently unstable, and its API may change, or it may be removed,
// without a major version bump.
type Snowsight struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`

	HealthcheckUsername string `json:"healthcheckUsername"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	PortOverride int32 `json:"portOverride"`

	SamlMetadata string `json:"samlMetadata"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`

	Subdomain string `json:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type Sybase struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type SybaseIQ struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

type Tag struct {
	Name string `json:"name"`

	Value string `json:"value"`
}

type Teradata struct {
	// Bind interface
	BindInterface string `json:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter string `json:"egressFilter"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy bool `json:"healthy"`

	Hostname string `json:"hostname"`
	// Unique identifier of the Resource.
	ID string `json:"id"`
	// Unique human-readable name of the Resource.
	Name string `json:"name"`

	Password string `json:"password"`

	Port int32 `json:"port"`

	PortOverride int32 `json:"portOverride"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreID string `json:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`

	Username string `json:"username"`
}

// UpdateResponseMetadata is reserved for future use.
type UpdateResponseMetadata struct {
}

// A User can connect to resources they are granted directly, or granted
// via roles.
type User struct {
	// The User's email address. Must be unique.
	Email string `json:"email"`
	// External ID is an alternative unique ID this user is represented by within an external service.
	ExternalID string `json:"externalId"`
	// The User's first name.
	FirstName string `json:"firstName"`
	// Unique identifier of the User.
	ID string `json:"id"`
	// The User's last name.
	LastName string `json:"lastName"`
	// Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
	ManagedBy string `json:"managedBy"`
	// PermissionLevel is a read only field for the user's permission level e.g. admin, DBA, user.
	PermissionLevel string `json:"permissionLevel"`
	// The User's suspended state.
	Suspended bool `json:"suspended"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type VaultAppRoleStore struct {
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`

	Namespace string `json:"namespace"`

	ServerAddress string `json:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type VaultTLSStore struct {
	CACertPath string `json:"caCertPath"`

	ClientCertPath string `json:"clientCertPath"`

	ClientKeyPath string `json:"clientKeyPath"`
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`

	Namespace string `json:"namespace"`

	ServerAddress string `json:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

type VaultTokenStore struct {
	// Unique identifier of the SecretStore.
	ID string `json:"id"`
	// Unique human-readable name of the SecretStore.
	Name string `json:"name"`

	Namespace string `json:"namespace"`

	ServerAddress string `json:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags Tags `json:"tags"`
}

// AccountAttachmentIterator provides read access to a list of AccountAttachment.
// Use it like so:
//
//	for iterator.Next() {
//	    accountAttachment := iterator.Value()
//	    // ...
//	}
type AccountAttachmentIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() *AccountAttachment
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// AccountGrantIterator provides read access to a list of AccountGrant.
// Use it like so:
//
//	for iterator.Next() {
//	    accountGrant := iterator.Value()
//	    // ...
//	}
type AccountGrantIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() *AccountGrant
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// AccountIterator provides read access to a list of Account.
// Use it like so:
//
//	for iterator.Next() {
//	    account := iterator.Value()
//	    // ...
//	}
type AccountIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() Account
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// NodeIterator provides read access to a list of Node.
// Use it like so:
//
//	for iterator.Next() {
//	    node := iterator.Value()
//	    // ...
//	}
type NodeIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() Node
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// RemoteIdentityIterator provides read access to a list of RemoteIdentity.
// Use it like so:
//
//	for iterator.Next() {
//	    remoteIdentity := iterator.Value()
//	    // ...
//	}
type RemoteIdentityIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() *RemoteIdentity
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// RemoteIdentityGroupIterator provides read access to a list of RemoteIdentityGroup.
// Use it like so:
//
//	for iterator.Next() {
//	    remoteIdentityGroup := iterator.Value()
//	    // ...
//	}
type RemoteIdentityGroupIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() *RemoteIdentityGroup
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// TagIterator provides read access to a list of Tag.
// Use it like so:
//
//	for iterator.Next() {
//	    tag := iterator.Value()
//	    // ...
//	}
type TagIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() *Tag
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// ResourceIterator provides read access to a list of Resource.
// Use it like so:
//
//	for iterator.Next() {
//	    resource := iterator.Value()
//	    // ...
//	}
type ResourceIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() Resource
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// RoleIterator provides read access to a list of Role.
// Use it like so:
//
//	for iterator.Next() {
//	    role := iterator.Value()
//	    // ...
//	}
type RoleIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() *Role
	// Err returns the first error encountered during iteration, if any.
	Err() error
}

// SecretStoreIterator provides read access to a list of SecretStore.
// Use it like so:
//
//	for iterator.Next() {
//	    secretStore := iterator.Value()
//	    // ...
//	}
type SecretStoreIterator interface {
	// Next advances the iterator to the next item in the list. It returns
	// true if an item is available to retrieve via the `Value()` function.
	Next() bool
	// Value returns the current item, if one is available.
	Value() SecretStore
	// Err returns the first error encountered during iteration, if any.
	Err() error
}
